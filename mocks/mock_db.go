// Code generated by MockGen. DO NOT EDIT.
// Source: database/db.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSKUDataAccess is a mock of SKUDataAccess interface
type MockSKUDataAccess struct {
	ctrl     *gomock.Controller
	recorder *MockSKUDataAccessMockRecorder
}

// MockSKUDataAccessMockRecorder is the mock recorder for MockSKUDataAccess
type MockSKUDataAccessMockRecorder struct {
	mock *MockSKUDataAccess
}

// NewMockSKUDataAccess creates a new mock instance
func NewMockSKUDataAccess(ctrl *gomock.Controller) *MockSKUDataAccess {
	mock := &MockSKUDataAccess{ctrl: ctrl}
	mock.recorder = &MockSKUDataAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSKUDataAccess) EXPECT() *MockSKUDataAccessMockRecorder {
	return _m.recorder
}

// Insert mocks base method
func (_m *MockSKUDataAccess) Insert(_param0 int, _param1 string, _param2 string, _param3 int) error {
	ret := _m.ctrl.Call(_m, "Insert", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (_mr *MockSKUDataAccessMockRecorder) Insert(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Insert", reflect.TypeOf((*MockSKUDataAccess)(nil).Insert), arg0, arg1, arg2, arg3)
}

// Get mocks base method
func (_m *MockSKUDataAccess) Get(_param0 int) string {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get
func (_mr *MockSKUDataAccessMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Get", reflect.TypeOf((*MockSKUDataAccess)(nil).Get), arg0)
}

// Print mocks base method
func (_m *MockSKUDataAccess) Print() string {
	ret := _m.ctrl.Call(_m, "Print")
	ret0, _ := ret[0].(string)
	return ret0
}

// Print indicates an expected call of Print
func (_mr *MockSKUDataAccessMockRecorder) Print() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Print", reflect.TypeOf((*MockSKUDataAccess)(nil).Print))
}

// Update mocks base method
func (_m *MockSKUDataAccess) Update(_param0 int, _param1 int) error {
	ret := _m.ctrl.Call(_m, "Update", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockSKUDataAccessMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockSKUDataAccess)(nil).Update), arg0, arg1)
}

// Delete mocks base method
func (_m *MockSKUDataAccess) Delete(_param0 int) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockSKUDataAccessMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockSKUDataAccess)(nil).Delete), arg0)
}
